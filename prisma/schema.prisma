// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}


generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

//User model
model User {
  id        String      @id @default(cuid())
  name      String?   
  email     String?   @unique
  emailVerified DateTime?
  image    String?
  password  String?
  role    UserRole   @default(USER)
  accounts  Account[]
  jobApplication JobApplication[]
} 


//Account model
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}



// Verification Token model
model VerificationToken {
  id        String    @id @default(cuid())
  email     String
  token     String @unique
  expiresAt DateTime

  @@unique([email, token])
}

// Password Reset Token model
model PasswordResetToken {
  id        String    @id @default(cuid())
  email     String
  token     String @unique
  expiresAt DateTime

  @@unique([email, token])
}


// Job Applicaiton model
model JobApplication {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  jobTitle        String
  companyName     String
  salary          String?
  jobStatus       String
  dateApplied     DateTime
  jobType         String?
  location        String?
  country         String?
  jobLink         String?
  followUpDate    DateTime?
  notes           String?
  recruiterName   String?
  contactEmail    String?
  contactPhone    String?
  address         String?
  linkedinProfile String?
  portfolio       String?
  resume          String?
  coverLetter     String?
  otherFiles      String[]
  documentNotes   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}




